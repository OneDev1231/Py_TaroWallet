"""
Django settings for tarowallet project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

DEV_ENV = os.getenv("DEV_ENV")

# SECURITY WARNING: keep the secret key used in production secret!
if "test" in sys.argv:
    SECRET_KEY = "django-insecure-qg0p9&)#f+m#)h-8x(!dif-z#3_wl1yo(xge@@_$(glikwi&7w"
else:
    SECRET_KEY = os.getenv("SECRET_KEY")


if DEV_ENV == "DEV" or "test" in sys.argv:
    DEBUG = True
elif DEV_ENV == "PROD":
    DEBUG = True
else:
    raise Exception(f"Unknown environment {DEV_ENV}")

ALLOWED_HOSTS = ["*"]

if DEV_ENV == "DEV" or "test" in sys.argv:
    CSRF_TRUSTED_ORIGINS = ["https://testnet.tarowallet.net"]
elif DEV_ENV == "PROD":
    CSRF_TRUSTED_ORIGINS = ["https://mainnet.tiramisuwallet.com"]
else:
    raise Exception(f"Unknown environment {DEV_ENV}")

# Application definition

INSTALLED_APPS = [
    "aws_xray_sdk.ext.django",
    "ajax_select",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "walletapp.apps.WalletappConfig",
    "health_check",
    "django_s3_storage",
    "django.contrib.sitemaps",
    "django_truncate",
    "rest_framework",
    "rest_framework_swagger",
    "rest_framework.authtoken",
    "django_recaptcha",
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
]

MIDDLEWARE = [
    "aws_xray_sdk.ext.django.middleware.XRayMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]


ROOT_URLCONF = "tarowallet.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "walletapp.context_processors.load_nav_obj",
            ],
        },
    },
]


RECAPTCHA_PUBLIC_KEY = os.getenv("RECAPTCHA_PUBLIC_KEY")
RECAPTCHA_PRIVATE_KEY = os.getenv("RECAPTCHA_PRIVATE_KEY")


WSGI_APPLICATION = "tarowallet.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

if "test" in sys.argv:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "tarowallet",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": f"tiramisuowallet_{DEV_ENV.lower()}" if DEV_ENV else "test",
            "USER": os.getenv("PG_USERNAME"),
            "PASSWORD": os.getenv("PG_PASSWORD"),
            "HOST": os.getenv("POSTGER_URL").split(":")[0],
            "PORT": os.getenv("POSTGER_URL").split(":")[1],
        }
    }

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication"
    ],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"anon": "1000/day", "user": "100000/day"},
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = os.path.join(BASE_DIR, "django_static", "static")

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = "/"

DEFAULT_FILE_STORAGE = "django_s3_storage.storage.S3Storage"
STATICFILES_STORAGE = "django_s3_storage.storage.StaticS3Storage"

if DEV_ENV == "DEV" or "test" in sys.argv:
    AWS_STORAGE_BUCKET_NAME = "django-images-testnet"
    AWS_S3_BUCKET_NAME_STATIC = "django-images-testnet"
elif DEV_ENV == "PROD":
    AWS_STORAGE_BUCKET_NAME = "django-images-prod"
    AWS_S3_BUCKET_NAME_STATIC = "django-images-prod"
else:
    raise Exception(f"Unknown environment {DEV_ENV}")

AWS_S3_REGION_NAME = "us-east-1"

AWS_S3_FILE_OVERWRITE = True
AWS_DEFAULT_ACL = None
AWS_LOCATION = "media/"

MEDIA_ROOT = os.path.join(BASE_DIR, "static/images/")
STATIC_ROOT = os.path.join(BASE_DIR, "static")

AWS_S3_BUCKET_NAME = AWS_STORAGE_BUCKET_NAME
AWS_REGION = "us-east-1"

# SESSION_EXPIRE_AT_BROWSER_CLOSE = False
# SESSION_COOKIE_AGE = 60 * 60

AJAX_SELECT_BOOTSTRAP = True

if DEV_ENV == "DEV" or "test" in sys.argv:
    SITE_ID = 2
elif DEV_ENV == "PROD":
    SITE_ID = 3


SOCIALACCOUNT_LOGIN_ON_GET = True

AUTHENTICATION_BACKENDS = ["allauth.account.auth_backends.AuthenticationBackend"]

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}

SOCIALACCOUNT_ADAPTER = "tarowallet.profiles_models.CustomSocialAccountAdapter"
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"

XRAY_RECORDER = {
    "AUTO_INSTRUMENT": True,
    "AWS_XRAY_CONTEXT_MISSING": "LOG_ERROR",
    "AWS_XRAY_DAEMON_ADDRESS": "127.0.0.1:2000",
    "AWS_XRAY_TRACING_NAME": f"TIRAMISU_{DEV_ENV}",
    "PLUGINS": ("EC2Plugin", "ECSPlugin"),
    "SAMPLING": False,
    "STREAMING_THRESHOLD": 100,
}

# dummy commit
