# Generated by Django 4.1.4 on 2023-02-02 15:00

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("walletapp", "0012_alter_currencies_picture_large_and_more"),
    ]

    operations = [
        migrations.AlterField(
            model_name="balances",
            name="balance",
            field=models.IntegerField(
                default=0,
                help_text="Wallet balance",
                validators=[django.core.validators.MinValueValidator(0)],
            ),
        ),
        migrations.AlterField(
            model_name="balances",
            name="pending_balance",
            field=models.IntegerField(
                default=0,
                help_text="Pending wallet balance",
                validators=[django.core.validators.MinValueValidator(0)],
            ),
        ),
        migrations.AlterField(
            model_name="currencies",
            name="acronym",
            field=models.CharField(
                help_text=(
                    "Cryptocurrency acronym represented as 1 to 5 letters. e.g."
                    " ETH, BTC"
                ),
                max_length=5,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        "^[0-9a-zA-Z]*$", "Only alphanumeric characters are allowed."
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name="currencies",
            name="genesis_bootstrap_info",
            field=models.CharField(
                default="",
                help_text="Genesis bootstrap info. Required for creating an invoice",
                max_length=10000,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="currencies",
            name="name",
            field=models.CharField(
                help_text=(
                    "Cryptocurrency name represented as word. e.g. Bitcoin, Ethereum"
                ),
                max_length=30,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        "^[0-9a-zA-Z]*$", "Only alphanumeric characters are allowed."
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name="currencies",
            name="supply",
            field=models.IntegerField(
                blank=True,
                default=1000000,
                help_text="Total supply of the asset if minted",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(34),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="transactions",
            name="type",
            field=models.CharField(
                choices=[
                    ("user", "User Transaction"),
                    ("internal", "Internal Transaction"),
                    ("fee", "Fee"),
                    ("minting", "Minting transaction"),
                ],
                default="",
                help_text="Transaction type",
                max_length=50,
            ),
        ),
        migrations.AddConstraint(
            model_name="transactions",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "inbound_invoice_waiting_for"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", False),
                        ("invoice_outbound__isnull", True),
                        ("status", "inbound_invoice_generated"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", False),
                        ("invoice_outbound__isnull", True),
                        ("status", "inbound_invoice_paid"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", False),
                        ("status", "outbound_invoice_received"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", False),
                        ("status", "outbound_invoice_paid"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "placeholder_fee"),
                        ("type", "fee"),
                    ),
                    models.Q(
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "fee_paid"),
                        ("type", "fee"),
                    ),
                    models.Q(
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "minting_submitted"),
                        ("type", "minting"),
                    ),
                    models.Q(
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "tx_created"),
                        ("type", "minting"),
                    ),
                    models.Q(
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "minted"),
                        ("type", "minting"),
                    ),
                    ("status", "error"),
                    _connector="OR",
                ),
                name="check_transaction_status_consistency",
            ),
        ),
    ]
