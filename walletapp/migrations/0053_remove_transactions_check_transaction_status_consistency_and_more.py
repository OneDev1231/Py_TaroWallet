# Generated by Django 4.1.4 on 2023-10-28 17:33

import django.core.validators
import django_s3_storage.storage
import walletapp.utils
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("walletapp", "0052_alter_currencies_picture_large_and_more"),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name="transactions",
            name="check_transaction_status_consistency",
        ),
        migrations.AddField(
            model_name="pricehistory",
            name="volume",
            field=models.FloatField(
                blank=True,
                default=0,
                help_text="Currency volume",
                validators=[django.core.validators.MinValueValidator(0)],
            ),
        ),
        migrations.AlterField(
            model_name="currencies",
            name="picture_large",
            field=models.ImageField(
                blank=True,
                help_text="Small icon representing the asset",
                null=True,
                storage=django_s3_storage.storage.S3Storage(
                    aws_s3_bucket_name="django-images-testnet"
                ),
                upload_to=walletapp.utils.get_media_path_large,
            ),
        ),
        migrations.AlterField(
            model_name="currencies",
            name="picture_orig",
            field=models.ImageField(
                blank=True,
                help_text=(
                    "Image representing the asset. Please upload a square image about"
                    " 800x800 in size. Images will be rescaled."
                ),
                null=True,
                storage=django_s3_storage.storage.S3Storage(
                    aws_s3_bucket_name="django-images-testnet"
                ),
                upload_to=walletapp.utils.get_media_path_orig,
            ),
        ),
        migrations.AlterField(
            model_name="currencies",
            name="picture_small",
            field=models.ImageField(
                blank=True,
                help_text="Large icon representing the asset",
                null=True,
                storage=django_s3_storage.storage.S3Storage(
                    aws_s3_bucket_name="django-images-testnet"
                ),
                upload_to=walletapp.utils.get_media_path_small,
            ),
        ),
        migrations.AddConstraint(
            model_name="transactions",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "inbound_invoice_waiting_for"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", False),
                        ("invoice_outbound__isnull", True),
                        ("status", "inbound_invoice_generated"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", False),
                        ("invoice_outbound__isnull", True),
                        ("status", "inbound_invoice_paid"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", False),
                        ("status", "outbound_invoice_received"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", False),
                        ("status", "outbound_invoice_paid"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("destination_user__isnull", False),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "placeholder_fee"),
                        ("type", "fee"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "placeholder_fee"),
                        ("type", "fee"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "fee_paid"),
                        ("type", "fee"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "minting_submitted"),
                        ("type", "minting"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "minting"),
                        ("type", "minting"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "tx_created"),
                        ("type", "minting"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "minted"),
                        ("type", "minting"),
                    ),
                    models.Q(
                        ("destination_user__isnull", False),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "internal_stated"),
                        ("type", "internal"),
                    ),
                    models.Q(
                        ("destination_user__isnull", False),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "internal_finished"),
                        ("type", "internal"),
                    ),
                    models.Q(
                        ("destination_user__isnull", False),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "exchange_started"),
                        ("type", "exchange"),
                    ),
                    models.Q(
                        ("destination_user__isnull", False),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "exchange_finished"),
                        ("type", "exchange"),
                    ),
                    models.Q(
                        ("destination_user__isnull", False),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "exchange_started"),
                        ("type", "exchange"),
                    ),
                    models.Q(
                        ("destination_user__isnull", False),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "exchange_finished"),
                        ("type", "exchange"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", False),
                        ("invoice_outbound__isnull", True),
                        ("status", "replaced_with_internal_transaction"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "waiting_for_meta_data"),
                        ("type", "register_currency"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "currency_registration_finished"),
                        ("type", "register_currency"),
                    ),
                    ("status", "error"),
                    _connector="OR",
                ),
                name="check_transaction_status_consistency",
            ),
        ),
    ]
