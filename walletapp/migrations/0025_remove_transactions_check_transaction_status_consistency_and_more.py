# Generated by Django 4.1.4 on 2023-02-03 16:14

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        (
            "walletapp",
            "0024_remove_transactions_check_transaction_status_consistency_and_more",
        ),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name="transactions",
            name="check_transaction_status_consistency",
        ),
        migrations.AlterField(
            model_name="currencies",
            name="acronym",
            field=models.CharField(
                help_text=(
                    "Cryptocurrency acronym represented as 1 to 5 letters. e.g."
                    " ETH, BTC"
                ),
                max_length=5,
                validators=[
                    django.core.validators.RegexValidator(
                        "^[0-9a-zA-Z]*$", "Only alphanumeric characters are allowed."
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name="currencies",
            name="supply",
            field=models.IntegerField(
                blank=True,
                default=1,
                help_text="Total supply of the asset if minted",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(4294967296),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="transactions",
            name="status",
            field=models.CharField(
                choices=[
                    (
                        "inbound_invoice_waiting_for",
                        "Waiting for inbound invoice to be generated",
                    ),
                    (
                        "inbound_invoice_generated",
                        "Inbound invoice was generated, waiting for it to be paid",
                    ),
                    ("inbound_invoice_paid", "Inbound invoice was successfully paid"),
                    (
                        "outbound_invoice_received",
                        "Outbound invoice is waiting to be paid",
                    ),
                    ("outbound_invoice_paid", "Outbound invoice paid"),
                    ("placeholder_fee", "Placeholder fee, real amount will be added"),
                    ("fee_paid", "Fee paid"),
                    ("minting_submitted", "Currency submitted for minting"),
                    ("minting", "Currency is minting"),
                    ("tx_created", "Minting transaction created"),
                    ("minted", "Minting transaction was completed"),
                    ("internal_started", "Internal transaction submitted"),
                    ("internal_finished", "Internal transaction finished"),
                    ("error", "Error"),
                ],
                default="",
                help_text="Transaction status",
                max_length=50,
            ),
        ),
        migrations.AddConstraint(
            model_name="transactions",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "inbound_invoice_waiting_for"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", False),
                        ("invoice_outbound__isnull", True),
                        ("status", "inbound_invoice_generated"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", False),
                        ("invoice_outbound__isnull", True),
                        ("status", "inbound_invoice_paid"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", False),
                        ("status", "outbound_invoice_received"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", False),
                        ("status", "outbound_invoice_paid"),
                        ("type", "user"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "placeholder_fee"),
                        ("type", "fee"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "fee_paid"),
                        ("type", "fee"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "minting_submitted"),
                        ("type", "minting"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "minting"),
                        ("type", "minting"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "tx_created"),
                        ("type", "minting"),
                    ),
                    models.Q(
                        ("destination_user__isnull", True),
                        ("direction", "inbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "minted"),
                        ("type", "minting"),
                    ),
                    models.Q(
                        ("destination_user__isnull", False),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "internal_stated"),
                        ("type", "internal"),
                    ),
                    models.Q(
                        ("destination_user__isnull", False),
                        ("direction", "outbound"),
                        ("invoice_inbound__isnull", True),
                        ("invoice_outbound__isnull", True),
                        ("status", "internal_finished"),
                        ("type", "internal"),
                    ),
                    ("status", "error"),
                    _connector="OR",
                ),
                name="check_transaction_status_consistency",
            ),
        ),
    ]
